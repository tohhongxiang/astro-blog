---
import { ModeToggle } from "@/components/mode-toggle";
import { Button } from "@/components/ui/button";
import BaseLayout from "@/layouts/base-layout.astro";
import { formatDate } from "@/lib/format-date";
import { ChevronLeft, ChevronUp } from "lucide-react";

const { title, date, description, Content } = Astro.props as {
	title: string;
	date: Date;
	description?: string;
	Content: any;
};
---

<BaseLayout title={title}>
	<div class="mx-auto flex max-w-prose flex-col gap-8 px-4 py-4">
		<div class="flex w-full flex-row items-center justify-between">
			<a href="/">
				<h1
					class="text-xl font-extrabold tracking-wide"
					transition:name="site-title"
				>
					THX's Blog
				</h1>
			</a>
			<ModeToggle client:load />
		</div>
		<div>
			<button
				class="text-muted-foreground hover:text-primary flex cursor-pointer flex-row items-center"
				id="go-back"
			>
				<ChevronLeft />
				<span>Go back</span>
			</button>
		</div>
		<div class="border-b">
			<h1 class="text-2xl font-bold tracking-wide">{title}</h1>
			<time
				datetime={formatDate(date)}
				class="text-muted-foreground font-mono"
			>
				{formatDate(date)}
			</time>
			{
				description && (
					<p class="text-muted-foreground mt-4 mb-6 italic">
						{description}
					</p>
				)
			}
		</div>
		<div class="prose dark:prose-invert">
			<Content />
			<div class="p-4"></div>
		</div>
	</div>
	<Button
		id="scroll-to-top"
		className="fixed right-8 bottom-12 cursor-pointer"
		><ChevronUp />
	</Button>
</BaseLayout>
<script is:inline>
	const dataTheme = document.documentElement.getAttribute("data-theme");
	document.querySelectorAll(".mermaid-dark").forEach((el) => {
		if (dataTheme === "dark") {
			el.setAttribute("media", "all");
		} else {
			el.setAttribute("media", "none");
		}
	});

	const handleClick = () => {
		window.scrollTo(0, 0);
	};

	const handleGoBack = () => {
		history.back();
	};

	const setup = () => {
		document
			.getElementById("scroll-to-top")
			?.addEventListener("click", handleClick);

		document
			.getElementById("go-back")
			?.addEventListener("click", handleGoBack);

		// clicking on a header link should replace instead of push, so that user can go back to the actual previous page
		document.querySelectorAll(".header-link").forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				location.replace(location.pathname + link.getAttribute("href"));
			});
		});
	};

	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", setup);
	} else {
		setup();
	}
</script>
